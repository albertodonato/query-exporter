# Collection of metrics and stats for PostgreSQL's stats collector.
#
# See https://www.postgresql.org/docs/current/monitoring-stats.html for more
# details.
#
# Metrics and queries are inspired from the Dynatrace PostgreSQL plugin:
# https://github.com/Dynatrace/Dynatrace-AppMon-PostgreSQL-Monitor-Plugin
#
# To use this config, set PG_DATABASE_DSN environment variable to the desired
# server DSN.

databases:
  pg:
    dsn: !env PG_DATABASE_DSN

metrics:
  pg_process:
    type: gauge
    description: Number of PostgreSQL processes with their states
    labels: [state]
  pg_db_numbackends:
    type: gauge
    description: Number of backends currently connected to this database
    labels: [datname]
  pg_db_xact_commit:
    type: counter
    description: Number of transactions that have been committed
    labels: [datname]
  pg_db_xact_rollback:
    type: counter
    description: Number of transactions that have been rolled back
    labels: [datname]
  pg_db_blks_read:
    type: counter
    description: Number of disk blocks read
    labels: [datname]
  pg_db_blks_hit:
    type: counter
    description: >
      Number of times disk blocks were found already in the buffer cache, so
      that a read was not necessary (this only includes hits in the PostgreSQL
      buffer cache, not the operating system's file system cache
    labels: [datname]
  pg_db_tup_returned:
    type: counter
    description: Number of rows returned by queries
    labels: [datname]
  pg_db_tup_fetched:
    type: counter
    description: Number of rows fetched by queries
    labels: [datname]
  pg_db_tup_inserted:
    type: counter
    description : Number of rows inserted by queries
    labels: [datname]
  pg_db_tup_updated:
    type: counter
    description : Number of rows updated by queries
    labels: [datname]
  pg_db_tup_deleted:
    type: counter
    description: Number of rows deleted by queries
    labels: [datname]
  pg_db_conflicts:
    type: counter
    description: >
      Number of queries canceled due to conflicts with recovery. (Conflicts
      occur only on standby servers)
    labels: [datname]
  pg_db_temp_bytes:
    type: counter
    description: >
      Total amount of data written to temporary files by queries.  All
      temporary files are counted, regardless of why the temporary file was
      created, and regardless of the log_temp_files
    labels: [datname]
  pg_db_deadlocks:
    type: counter
    description: Number of deadlocks detected
    labels: [datname]
  pg_db_blk_read_time:
    type: counter
    description: Time spent reading data file blocks by backends in milliseconds
    labels: [datname]
  pg_db_blk_write_time:
    type: counter
    description: Time spent writing data file blocks by backends, in milliseconds
    labels: [datname]
  pg_table_seq_scan:
    type: counter
    description: Number of sequential scans initiated on the table
    labels: [relname]
  pg_table_seq_tup_read:
    type: counter
    description: Number of live rows fetched by sequential scans
    labels: [relname]
  pg_table_idx_scan:
    type: counter
    description: Number of index scans initiated on the table
    labels: [relname]
  pg_table_idx_tup_fetch:
    type: counter
    description: Number of live rows fetched by index scans
    labels: [relname]
  pg_table_tup_insert:
    type: counter
    description: Number of rows inserted
    labels: [relname]
  pg_table_tup_update:
    type: counter
    description: Number of rows updated
    labels: [relname]
  pg_table_tup_delete:
    type: counter
    description: Number of rows deleted
    labels: [relname]
  pg_table_tup_hot_update:
    type: gauge
    description: Number of rows HOT updated (i.e., with no separate index update required)
    labels: [relname]
  pg_table_live_tup:
    type: gauge
    description: Estimated number of live rows
    labels: [relname]
  pg_table_dead_tup:
    type: gauge
    description: Estimated number of dead rows
    labels: [relname]
  pg_table_vacuum:
    type: counter
    description: Number of times this table has been manually vacuumed (not counting VACUUM FULL)
    labels: [relname]
  pg_table_autovacuum:
    type: counter
    description: Number of times this table has been vacuumed by the autovacuum daemon
    labels: [relname]
  pg_table_analyze:
    type: counter
    description: Number of times this table has been manually analyzed
    labels: [relname]
  pg_table_autoanalyze:
    type: counter
    description: Number of times this table has been analyzed by the autovacuum daemon
    type: counter
  pg_table_io_heap_blks_read:
    type: counter
    description: Number of disk blocks read
    labels: [relname]
  pg_table_io_heap_blks_hit:
    type: counter
    description:  Number of buffer hits
    labels: [relname]
  pg_table_io_idx_blks_read:
    type: counter
    description: Number of disk blocks read from all indexes
    labels: [relname]
  pg_table_io_idx_blks_hit:
    type: counter
    description: Number of buffer hits in all indexes
    labels: [relname]
  pg_table_io_toast_blks_read:
    type: counter
    description: Number of disk blocks read from table TOAST table (if any)
    labels: [relname]
  pg_table_io_toast_blks_hit:
    type: counter
    description: Number of buffer hits in table TOAST table (if any)
    labels: [relname]
  pg_table_io_tidx_blks_read:
    type: counter
    description: Number of disk blocks read from table TOAST table index (if any)
    labels: [relname]
  pg_table_io_tidx_blks_hit:
    type: counter
    description: Number of buffer hits in table TOAST table index (if any)
    labels: [relname]
  pg_idx_scan:
    type: counter
    description: Number of index scans initiated by the index
    labels: [relname, indexrelname]
  pg_idx_tup_read:
    type: counter
    description: Number of index entries returned by scans on the index
    labels: [relname, indexrelname]
  pg_idx_tup_fetch:
    type: counter
    description: Number of live table rows fetched by simple index scans using the index
    labels: [relname, indexrelname]
  pg_idx_io_blks_read:
    type: counter
    labels: [relname, indexrelname]
  pg_idx_io_blks_hit:
    type: counter
    labels: [relname, indexrelname]
  pg_seq_blks_read:
    type: summary
    description: Number of disk blocks read
    labels: [relname]
  pg_seq_blks_hit:
    type: summary
    description: Number of buffer hits
    labels: [relname]
  pg_cache_heap_read:
    type: summary
    description: Number of disk blocks read
  pg_cache_heap_hit:
    type: summary
    description: Number of buffer hits
  pg_cache_hit_ratio:
    type: gauge
    description: Cache hit ratio
  pg_idx_usage_percent:
    type: gauge
    description: Percentage of time index was used for table
    labels: [relname]
  pg_idx_usage_rows:
    type: gauge
    description: Rows in table
    labels: [relname]
  pg_idx_cache_read:
    type: summary
    description: Number of disk blocks read for the index
  pg_idx_cache_hit:
    type: summary
    description: Number of buffer hits for the index
  pg_idx_cache_hit_ratio:
    type: gauge
    description: >
      Buffer hit ratio for the index. Generally, this should be 99% similar to
      regular cache hit rate

queries:
  process_stats:
    databases: [pg]
    metrics:
      - pg_process
    sql: >
      SELECT
        state,
        COUNT(*) AS pg_process
      FROM pg_stat_activity
      WHERE state IS NOT NULL
      GROUP BY state
  database_stats:
    databases: [pg]
    metrics:
      - pg_db_numbackends
      - pg_db_xact_commit
      - pg_db_xact_rollback
      - pg_db_blks_read
      - pg_db_blks_hit
      - pg_db_tup_returned
      - pg_db_tup_fetched
      - pg_db_tup_inserted
      - pg_db_tup_updated
      - pg_db_tup_deleted
      - pg_db_conflicts
      - pg_db_temp_bytes
      - pg_db_deadlocks
      - pg_db_blk_read_time
      - pg_db_blk_write_time
    sql: >
      SELECT
        datname AS datname,
        numbackends AS pg_db_numbackends,
        xact_commit AS pg_db_xact_commit,
        xact_rollback AS pg_db_xact_rollback,
        blks_read AS pg_db_blks_read,
        blks_hit AS pg_db_blks_hit,
        tup_returned AS pg_db_tup_returned,
        tup_fetched AS pg_db_tup_fetched,
        tup_inserted AS pg_db_tup_inserted,
        tup_updated AS pg_db_tup_updated,
        tup_deleted AS pg_db_tup_deleted,
        conflicts AS pg_db_conflicts,
        temp_bytes AS pg_db_temp_bytes,
        deadlocks AS pg_db_deadlocks,
        blk_read_time AS pg_db_blk_read_time,
        blk_write_time AS pg_db_blk_write_time
      FROM pg_stat_database

  table_stats:
    databases: [pg]
    metrics:
      - pg_table_seq_scan
      - pg_table_seq_tup_read
      - pg_table_idx_scan
      - pg_table_idx_tup_fetch
      - pg_table_tup_insert
      - pg_table_tup_update
      - pg_table_tup_delete
      - pg_table_tup_hot_update
      - pg_table_live_tup
      - pg_table_dead_tup
      - pg_table_vacuum
      - pg_table_autovacuum
      - pg_table_analyze
      - pg_table_autoanalyze
    sql: >
      SELECT
        relname,
        seq_scan AS pg_table_seq_scan,
        seq_tup_read AS pg_table_seq_tup_read,
        idx_scan AS pg_table_idx_scan,
        idx_tup_fetch AS pg_table_idx_tup_fetch,
        n_tup_ins AS pg_table_tup_insert,
        n_tup_upd AS pg_table_tup_update,
        n_tup_del AS pg_table_tup_delete,
        n_tup_hot_upd AS pg_table_tup_hot_update,
        n_live_tup AS pg_table_live_tup,
        n_dead_tup AS pg_table_dead_tup,
        vacuum_count AS pg_table_vacuum,
        autovacuum_count AS pg_table_autovacuum,
        analyze_count AS pg_table_analyze,
        autoanalyze_count AS pg_table_autoanalyze
      FROM pg_stat_user_tables
  tables_io_stats:
    databases: [pg]
    metrics:
      - pg_table_io_heap_blks_read
      - pg_table_io_heap_blks_hit
      - pg_table_io_idx_blks_read
      - pg_table_io_idx_blks_hit
      - pg_table_io_toast_blks_read
      - pg_table_io_toast_blks_hit
      - pg_table_io_tidx_blks_read
      - pg_table_io_tidx_blks_hit
    sql: >
      SELECT
        relname,
        SUM(heap_blks_read) AS pg_table_io_heap_blks_read,
        SUM(heap_blks_hit) AS pg_table_io_heap_blks_hit,
        SUM(idx_blks_read) AS pg_table_io_idx_blks_read,
        SUM(idx_blks_hit) AS pg_table_io_idx_blks_hit,
        SUM(toast_blks_read) AS pg_table_io_toast_blks_read,
        SUM(toast_blks_hit) AS pg_table_io_toast_blks_hit,
        SUM(tidx_blks_read) AS pg_table_io_tidx_blks_read,
        SUM(tidx_blks_hit) AS pg_table_io_tidx_blks_hit
      FROM pg_statio_user_tables
      GROUP BY relname
  idx_stats:
    databases: [pg]
    metrics:
      - pg_idx_scan
      - pg_idx_tup_read
      - pg_idx_tup_fetch
    sql: >
      SELECT
        relname,
        indexrelname,
        SUM(idx_scan) AS pg_idx_scan,
        SUM(idx_tup_read) AS pg_idx_tup_read,
        SUM(idx_tup_fetch) AS pg_idx_tup_fetch
      FROM pg_stat_user_indexes
      GROUP BY relname, indexrelname
  idx_io_stats:
    databases: [pg]
    metrics:
      - pg_idx_io_blks_read
      - pg_idx_io_blks_hit
    sql: >
      SELECT
        relname,
        indexrelname,
        SUM(idx_blks_read) AS pg_idx_io_blks_read,
        sum(idx_blks_hit) AS pg_idx_io_blks_hit
      FROM pg_statio_user_indexes
      GROUP BY relname, indexrelname
  seq_stats:
    databases: [pg]
    metrics:
      - pg_seq_blks_read
      - pg_seq_blks_hit
    sql: >
      SELECT
        relname,
        blks_read AS pg_seq_blks_read,
        blks_hit AS pg_seq_blks_hit
      FROM pg_statio_user_sequences
  cache_stats:
    databases: [pg]
    metrics:
      - pg_cache_heap_read
      - pg_cache_heap_hit
      - pg_cache_hit_ratio
    sql: >
      SELECT
        SUM(heap_blks_read) AS pg_cache_heap_read,
        SUM(heap_blks_hit) AS pg_cache_heap_hit,
        (SUM(heap_blks_hit) / (SUM(heap_blks_hit) + SUM(heap_blks_read))) * 100 AS pg_cache_hit_ratio
      FROM pg_statio_user_tables
  idx_usage_stats:
    databases: [pg]
    metrics:
      - pg_idx_usage_percent
      - pg_idx_usage_rows
    sql: >
      SELECT
        relname,
        100 * idx_scan / (seq_scan + idx_scan) AS pg_idx_usage_percent,
        n_live_tup AS pg_idx_usage_rows
      FROM pg_stat_user_tables
      WHERE seq_scan + idx_scan > 0
  idx_cache_stats:
    databases: [pg]
    metrics:
      - pg_idx_cache_read
      - pg_idx_cache_hit
      - pg_idx_cache_hit_ratio
    sql: >
      SELECT
        SUM(idx_blks_read) AS pg_idx_cache_read,
        SUM(idx_blks_hit) AS pg_idx_cache_hit,
        ((SUM(idx_blks_hit) - SUM(idx_blks_read)) / SUM(idx_blks_hit)) * 100 AS pg_idx_cache_hit_ratio
      FROM pg_statio_user_indexes
